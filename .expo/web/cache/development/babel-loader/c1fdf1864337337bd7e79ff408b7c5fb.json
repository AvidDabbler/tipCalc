{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Walter\\\\dev\\\\tipCalc\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Button } from 'react-native-paper';\nimport Hello from \"./Hello\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n    _this.state = {\n      inputValue: '',\n      tip: 0.2\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"updateCustomTip\",\n    value: function updateCustomTip(customTip) {\n      if (!customTip) {\n        this.setState({\n          tip: 0\n        });\n        return;\n      } else {\n        this.setState({\n          tip: parseFloat(customTip) / 100\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tip = 0.00;\n\n      if (this.state.inputValue) {\n        tip = parseFloat(this.state.inputValue) * this.state.tip;\n        tip = (Math.round(tip * 100) / 100).toFixed(2);\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, \"$\", tip), React.createElement(TextInput, {\n        value: this.state.inputValue,\n        style: styles.textInput,\n        keyboardType: \"numeric\",\n        placeholder: \"0.00\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            inputValue: text\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.tipList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        mode: \"contained\",\n        title: \"10%\",\n        style: styles.tipButton,\n        onPress: function onPress() {\n          _this2.setState({\n            tip: '0.1'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, \"10%\"), React.createElement(Button, {\n        mode: \"contained\",\n        title: \"15%\",\n        style: styles.tipButton,\n        onPress: function onPress() {\n          _this2.setState({\n            tip: '0.15'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, \"15%\"), React.createElement(Button, {\n        mode: \"contained\",\n        title: \"20%\",\n        style: styles.tipButton,\n        onPress: function onPress() {\n          _this2.setState({\n            tip: '0.2'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, \"15%\"), React.createElement(TextInput, {\n        value: (this.state.tip * 100).toString(),\n        style: styles.customTip,\n        keyboardType: \"numeric\",\n        placeholder: \"0.00\",\n        onChangeText: function onChangeText(customTip) {\n          return _this2.updateCustomTip(customTip);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  textInput: {\n    height: 60,\n    fontSize: 20,\n    borderColor: '#333',\n    borderWidth: 1,\n    width: '100%',\n    padding: 10\n  },\n  tipList: {\n    flexDirection: 'row',\n    margin: 20,\n    padding: 20\n  },\n  tipButton: {\n    color: 'white',\n    fontSize: 90\n  },\n  customTip: {\n    height: 50,\n    width: 55,\n    fontSize: 30,\n    borderColor: '#333',\n    borderWidth: 1,\n    padding: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/Walter/dev/tipCalc/App.js"],"names":["StatusBar","React","Button","Hello","App","state","inputValue","tip","customTip","setState","parseFloat","Math","round","toFixed","styles","container","textInput","text","tipList","tipButton","toString","updateCustomTip","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","height","fontSize","borderColor","borderWidth","width","flexDirection","margin","color"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { TextInput, StyleSheet, View, Text, } from 'react-native';\nimport { Button } from 'react-native-paper';\n\n\nimport Hello from './Hello'\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = { \n      inputValue: '',\n      tip: 0.2\n    }\n  }\n\n\n  updateCustomTip(customTip) {\n    if (!customTip) {\n      this.setState({\n        tip: 0\n      })\n      return;\n    }\n    else {\n      this.setState({\n        tip: parseFloat(customTip) / 100\n      })\n    }\n\n  }\n\n  render() {\n    let tip = 0.00;\n    if (this.state.inputValue) {\n      tip = parseFloat(this.state.inputValue) * this.state.tip;\n      tip = (Math.round(tip * 100) / 100).toFixed(2);\n    }\n\n    return (\n      <View style={styles.container}>\n        <Text>\n          ${tip}\n        </Text>\n        <TextInput\n          value={ this.state.inputValue }\n          style={styles.textInput}\n          keyboardType='numeric'\n          placeholder='0.00'\n          onChangeText={(text)=>this.setState({inputValue: text})}\n        />\n\n        <View style={styles.tipList}>\n          <Button mode='contained'\n            title='10%'\n            style={styles.tipButton}\n            onPress={()=>{this.setState({tip:'0.1'})}}>\n            10%\n          </Button>\n        <Button mode='contained'\n            title='15%'\n            style={styles.tipButton}\n            onPress={() => { this.setState({ tip: '0.15' }) }}>\n            15%\n          </Button>\n          <Button mode='contained'\n            title='20%'\n            style={styles.tipButton}\n            onPress={()=>{this.setState({tip:'0.2'})}}>\n            15%\n          </Button>\n\n        <TextInput\n          value={(this.state.tip * 100).toString()}\n          style={styles.customTip}\n          keyboardType='numeric'\n          placeholder='0.00'\n          onChangeText={customTip => this.updateCustomTip(customTip)}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding:20,\n    \n  },\n  textInput: {\n    height: 60,\n    fontSize:20,\n    borderColor: '#333',\n    borderWidth: 1,\n    width: '100%',\n    padding: 10,\n  },\n  tipList: {\n    flexDirection: 'row',\n    margin: 20,\n    padding:20\n    \n  },\n  tipButton: {\n    color:'white',\n    fontSize:90\n  },\n  customTip: {\n    height: 50,\n    width: 55,\n    fontSize: 30,\n    borderColor: '#333',\n    borderWidth: 1,\n    padding: 10,\n  }\n  \n});\n"]},"metadata":{},"sourceType":"module"}