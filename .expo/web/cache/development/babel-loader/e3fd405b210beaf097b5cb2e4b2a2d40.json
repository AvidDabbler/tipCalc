{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Walter\\\\dev\\\\tipCalc\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Hello from \"./Hello\";\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n    _this.state = {\n      inputValue: '',\n      tip: 0.2\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tip = 0.00;\n\n      if (this.state.inputValue) {\n        tip = parseFloat(this.state.inputValue) * this.state.tip;\n        tip = (Math.round(tip * 100) / 100).toFixed(2);\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, \"$\", tip), React.createElement(TextInput, {\n        value: this.state.inputValue,\n        style: styles.textInput,\n        keyboardType: \"numeric\",\n        placeholder: \"0.00\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            inputValue: text\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.tipList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        title: \"10%\",\n        onPress: function onPress() {\n          _this2.setState({\n            tip: '0.1'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"15%\",\n        onPress: function onPress() {\n          _this2.setState({\n            tip: '0.1'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"20%\",\n        onPress: function onPress() {\n          _this2.setState({\n            tip: '0.2'\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"Custom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      })), React.createElement(TextInput, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  textInput: {\n    height: 60,\n    fontSize: 20,\n    borderColor: '#333',\n    borderWidth: 1,\n    width: '100%',\n    padding: 10\n  },\n  tipList: {\n    flexDirection: 'row',\n    margin: 20\n  },\n  tipButton: {\n    color: 'white',\n    padding: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/Walter/dev/tipCalc/App.js"],"names":["StatusBar","React","Hello","App","state","inputValue","tip","parseFloat","Math","round","toFixed","styles","container","textInput","text","setState","tipList","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","height","fontSize","borderColor","borderWidth","width","flexDirection","margin","tipButton","color"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { TextInput, StyleSheet, View, Text, Button } from 'react-native';\n\n\nimport Hello from './Hello'\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = { \n      inputValue: '',\n      tip: 0.2\n    }\n  }\n\n  render() {\n    let tip = 0.00;\n    if (this.state.inputValue) {\n      tip = parseFloat(this.state.inputValue) * this.state.tip;\n      tip = (Math.round(tip * 100) / 100).toFixed(2);\n    }\n\n    return (\n      <View style={styles.container}>\n        <Text>\n          ${tip}\n        </Text>\n        <TextInput\n          value={ this.state.inputValue }\n          style={styles.textInput}\n          keyboardType='numeric'\n          placeholder='0.00'\n          onChangeText={(text)=>this.setState({inputValue: text})}\n        />\n\n        <View style={styles.tipList}>\n          <Button\n            title='10%'\n            onPress={()=>{this.setState({tip:'0.1'})}}\n          />\n          <Button\n            title='15%'\n            onPress={()=>{this.setState({tip:'0.1'})}}\n          />\n          <Button\n            title='20%'\n            onPress={()=>{this.setState({tip:'0.2'})}}\n          />\n          <Button title='Custom'  />\n        </View>\n\n        <TextInput\n          \n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding:20,\n    \n  },\n  textInput: {\n    height: 60,\n    fontSize:20,\n    borderColor: '#333',\n    borderWidth: 1,\n    width: '100%',\n    padding:10,\n  },\n  tipList: {\n    flexDirection: 'row',\n    margin: 20,\n  },\n  tipButton: {\n    color:'white',\n    padding: 20,\n  }\n  \n});\n"]},"metadata":{},"sourceType":"module"}